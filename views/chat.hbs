<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <title>App</title>
    <style>
        body {
            margin: 50px;
        }

        h1 {
            text-align: center;
        }

        .mails {
            padding: 20px;
            margin: 4px;
        }

        .mail-item {
            background-color: rgb(222, 222, 222);
            padding: 20px;
            margin: 4px;
        }

        .details {
            padding-left: 45px;
            margin: 4px;
        }

        .hidden {
            display: none;
        }

        .response {
            display: flex;
            padding-left: 45px;
            margin: 4px;
        }


        button {
            background-color: rgb(41, 41, 162);
            font-size: larger;
            color: white;
            margin-left: 45px;
        }


        #promptInput {
            width: 600px;
        }
    </style>
</head>

<body>
    <div class=".mails">
        <div class="details">

            <h3>Subject-<span class="subject">{{message.subject}}</span></h3>
            <p class="hidden">Current Email ID::<span class="currentEmailId">{{message.currentEmailId}}</span></p>
            <p class="hidden">threadId::<span class="threadId">{{message.threadId}}</span></p>
            <p class="hidden">accessToken::<span class="accessToken">{{message.accessToken}}</span></p>
            <p class="hidden">reference::<span class="reference">{{message.reference}}</span></p>
            <p class="hidden">replyTo::<span class="replyTo">{{message.replyTo}}</span></p>
            <p class="hidden"> Message_Id::<span class=" Message_Id">{{message.Message_Id}}</span></p>
            <p class="hidden"> returnReply::<span class=" returnReply">{{message.returnReply}}</span></p>

        </div>
        <ol>
            {{#each this.res}}
            <li>
                {{!-- <h3> From::<span class="from"> {{message.from}}</span></h3>
                <h3> To:: <span class="to">{{message.to}}</span></h3> --}}
                <p>From-<span class="from">{{this.from}}</span></p>

                <p>To-<span class="to">{{this.to}}</sp></span>

                <p class="mail-item">{{this.message}}</p>
                <br>
            </li>
            {{/each}}
        </ol>
        <div class="response">
            <textarea name="" id="promptInput" cols="30"
                rows="3">Your role is to generate response for this conversation</textarea>
            <button onclick="handleResponse()">Response</button>
        </div>
        <div id="new" class="response"></div>


    </div>
    <script>
        function handleResponse() {
            var messages = document.querySelectorAll('.mail-item');
            const latestConversation = messages[messages.length - 1].textContent
            var concatenatedMessage = Array.from(messages).map(function (message) {
                return message.textContent.trim();
            }).join();
            handleGenerateResponse(latestConversation)
        }

        let sendButton = false;
        async function handleGenerateResponse(latestConversation) {
            try {
                const prompt = document.getElementById('promptInput').value;
                if (!prompt) {
                    alert('Please enter a prompt.');
                    return;
                }
                const data = {
                    prompt: prompt,
                    concatenatedMessage: latestConversation,
                }

                fetch('/google/generate-response', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data),
                })
                    .then(async function (res) {
                        const response = await res.json();
                        var element = document.getElementById("new");
                        element.innerHTML = '';
                        var tag = document.createElement("p");
                        var textNode = document.createTextNode(response.messageResponse); // Create a text node
                        tag.appendChild(textNode); // Append the text node to the paragraph element
                        var element = document.getElementById("new");
                        element.appendChild(tag);
                        if (sendButton === false) {
                            sendButton = createSendButton();
                            sendButton = true
                        }
                    })
                    .catch(function (error) {
                        console.log('error', error)
                    })
            } catch (error) {
                console.error('Error:', error);
            }
        }

        function createSendButton() {
            console.log("button created")
            let button = document.createElement('button')
            button.textContent = 'send';
            document.body.appendChild(button);
            button.addEventListener('click', function () { handleSendResponse() })
        }

        //fetch chatgpt response
        function getChatResponse() {
            const chatId = document.getElementById('new')
            const chatAddress = chatId.querySelector("p")
            const chatText = chatAddress.textContent;
            return chatText;
        }

        //get to
        function getTo() {
            const toAddress = document.querySelector(".to")
            const toText = toAddress.textContent;
            console.log("to:::", toText)
            return toText;
        }

        //get from 
        function getFrom() {
            const toFrom = document.querySelector(".from")
            const from = toFrom.textContent;
            console.log("from:::", from)
            return from;
        }

        //get subject
        function getSubject() {
            const subjectAddress = document.querySelector(".subject")
            const subjectText = subjectAddress.textContent;
            console.log("subject:::", subjectText)
            return subjectText;
        }

        function getReference() {
            const referenceAddress = document.querySelector(".reference")
            const subjectText = referenceAddress.textContent;
            console.log("reference:::", subjectText)
            return subjectText;
        }

        function getReplyTo() {
            const subjectAddress = document.querySelector(".replyTo")
            const subjectText = subjectAddress.textContent;

            console.log("replyTo:::", subjectText)
            return subjectText;
        }

        function getAccessToken() {
            const address = document.querySelector('.accessToken')
            const accessToken = address.textContent;
            console.log("accessTOken form get function::", accessToken)
            return accessToken;
        }

        function getCurrentEmailId() {
            const address = document.querySelector('.currentEmailId')
            const currentEmailId = address.textContent;
            console.log("current Email from get methood::", currentEmailId)
            return currentEmailId;
        }

        function getThreadId() {
            const address = document.querySelector('.threadId')
            const threadId = address.textContent;
            console.log("threadID form get method::", threadId)
            return threadId;
        }

        function getMessageID() {
            const address = document.querySelector('.Message_Id')
            const Message_Id = address.textContent;
            console.log("messageId from get method::", Message_Id)
        }

        function getReturnReply() {
            const address = document.querySelector('.returnReply')
            const returnReply = address.textContent;
            console.log("messageId from get method::", returnReply)
        }
        function emailContents() {
            //get GPT REsponse
            const chatgptResponse = getChatResponse();
            console.log("chatgptREsponse::::", chatgptResponse)

            //get To address
            const to = getTo();

            //get from 
            const from = getFrom();

            //get subject
            const subject = getSubject()

            //get accessToken
            const accessToken = getAccessToken()

            //get threadId
            const threadId = getThreadId()

            //get current email
            const currentEmailId = getCurrentEmailId()

            const reference = getReference()


            const replyTo = getReplyTo()

            const Message_Id = getMessageID()

            const returnReply = getReturnReply()

            const emailContent = {
                chatgptResponse: chatgptResponse,
                to: trimStr(to),
                from: trimStr(from),
                subject: subject,
                reference: reference,
                replyTo: replyTo,
                Message_Id: Message_Id,
                currentEmailId: currentEmailId,
                accessToken: accessToken,
                threadId: threadId
            }
            console.log("EmailContent::", emailContent)
            return emailContent
        }


        //Send function
        function handleSendResponse() {
            console.log("button clicked")
            const emailContent = emailContents()
            console.log("EmailContent", emailContent)
            fetch(`/google/send-email`, {
                method: "Post",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(emailContent)
            })
                .then(function (response) {
                    console.log(response.json)
                    alert("Sent successfully!")
                })
        }

        function trimStr(str) {
            const emailRegex = /<([^>]+)>/; // Regular expression to match email address within <>

            const match = str.match(emailRegex);
            if (match && match[1]) {
                const emailAddress = match[1];
                console.log("after trim::", emailAddress)
                return emailAddress;
            } else {
                console.log("Email address not found in the string.");
                return str;
            }

        }

    </script>
</body>

</html>