<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <title>App</title>
    <style>
        body {
            margin: 50px;
        }

        h1 {
            text-align: center;
        }

        .mails {
            background-color: rgb(255, 216, 126);
            padding: 20px;
            margin: 4px;
        }

        .details {
            background-color: antiquewhite;
            padding: 20px;
            margin: 4px;
        }

        .hidden {
            display: none;
        }

        button {
            background-color: rgb(41, 41, 162);
            font-size: larger;
            color: white;
        }

        #promptInput {
            width: 600px;
        }
    </style>
</head>

<body>
    <div class=".mails">
        <div class="details">
            <h3> From::<span class="from"> {{message.from}}</span></h3>
            <h3> To:: <span class="to">{{message.to}}</span></h3>
            <h3>Subject::<span class="subject">{{message.subject}}</span></h3>
            <h3 class="hidden">reference::<span class="reference">{{message.reference}}</span></h3>
            <h3 class="hidden">replyTo::<span class="replyTo">{{message.replyTo}}</span></h3>
        </div>
        <ol>
            {{#each message.result}}
            <li>
                <p class="mail-item">{{this}}</p>
                <br>
            </li>
            {{/each}}
        </ol>
        <input type="text" id="promptInput"
            value=" You are Email Automation Specialist  generate a reply for this mail">
        <button onclick="handleResponse()">Response</button>
        <div id="new"></div>

    </div>
    <script>
        function handleResponse() {
            var messages = document.querySelectorAll('.mail-item');
            const latestConversation = messages[messages.length - 1].textContent
            var concatenatedMessage = Array.from(messages).map(function (message) {
                return message.textContent.trim();
            }).join();
            handleGenerateResponse(latestConversation)
        }


        async function handleGenerateResponse(latestConversation) {
            try {
                const prompt = document.getElementById('promptInput').value;
                if (!prompt) {
                    alert('Please enter a prompt.');
                    return;
                }
                const data = {
                    prompt: prompt,
                    concatenatedMessage: latestConversation,
                }

                fetch('/google/generate-response', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data),
                })
                    .then(async function (res) {
                        const response = await res.json();
                        var tag = document.createElement("p");
                        var textNode = document.createTextNode(response.messageResponse); // Create a text node
                        tag.appendChild(textNode); // Append the text node to the paragraph element
                        var element = document.getElementById("new");
                        element.appendChild(tag);
                    })
                    .catch(function (error) {
                        console.log('error', error)
                    })
            } catch (error) {
                console.error('Error:', error);
            }

            createSendButton()
        }

        function createSendButton() {

            let button = document.createElement('button')
            button.textContent = 'send';
            document.body.appendChild(button);
            button.addEventListener('click', function () { handleSendResponse() })
        }

        //fetch chatgpt response
        function getChatResponse() {
            const chatId = document.getElementById('new')
            const chatAddress = chatId.querySelector("p")
            const chatText = chatAddress.textContent;
            return chatText;
        }

        //get to
        function getTo() {
            const toAddress = document.querySelector(".to")
            const toText = toAddress.textContent;
            console.log("to:::", toText)
            return toText;
        }


        //get subject
        function getSubject() {
            const subjectAddress = document.querySelector(".subject")
            const subjectText = subjectAddress.textContent;
            console.log("subject:::", subjectText)
            return subjectText;
        }

        function getReference() {
            const subjectAddress = document.querySelector(".reference")
            const subjectText = subjectAddress.textContent;
            console.log("reference:::", subjectText)
            return subjectText;
        }

        function getReplyTo() {
            const subjectAddress = document.querySelector(".replyTo")
            const subjectText = subjectAddress.textContent;

            console.log("replyTo:::", subjectText)
            return subjectText;
        }
        function emailContents() {
            //get GPT REsponse
            const chatgptResponse = getChatResponse();
            console.log("chatgptREsponse::::", chatgptResponse)

            //get To address
            const to = getTo();

            //get subject
            const subject = getSubject()

            const reference = getReference()


            const replyTo = getReplyTo()

            const emailContent = {
                chatgptResponse: chatgptResponse,
                to: trimStr(to),
                subject: subject,
                reference: reference,
                replyTo: replyTo
            }
            console.log("EmailContent::", emailContent)
            return emailContent
        }


        //Send function
        function handleSendResponse() {
            const emailContent = emailContents()

            fetch(`/google/send-email`, {
                method: "Post",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(emailContent)
            })
                .then(function (response) {
                    console.log(response.json)
                })


        }

        function trimStr(str) {
            const emailRegex = /<([^>]+)>/; // Regular expression to match email address within <>

            const match = str.match(emailRegex);
            if (match && match[1]) {
                const emailAddress = match[1];
                return emailAddress;
            } else {
                console.log("Email address not found in the string.");
                return str;
            }

        }

    </script>
</body>

</html>