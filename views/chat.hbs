<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <title>App</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <style>
        pre {
            white-space: pre-wrap;
        }

        button {
            padding: 0.5rem 1rem;
            background-color: #28a745;
            margin-left: 4rem;
            /* Bootstrap success color */
            color: #fff;
            /* White text */
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            /* Smooth transition on hover */
        }

        .response-style {
            margin-left: 8px;
        }

        .response textarea {
            margin: 22px;
            padding: 12px;
        }

        /* Hover effect for the send button */
        button:hover {
            background-color: #218838;
            /* Darker shade on hover */
        }
    </style>
</head>

<body class="p-3 m-4 bg-body-secondary">

    <div class=".mails ">
        <div class="details">
            <h2 class=" m-5 text-center">Subject <span class="subject">{{message.subject}}</span></h2>
            <div class="visually-hidden">
                <p class="hidden">Current Email ID::<span class="currentEmailId">{{message.currentEmailId}}</span>
                </p>
                <p class="hidden">threadId::<span class="threadId">{{message.threadId}}</span></p>
                <p class="hidden">accessToken::<span class="accessToken">{{message.accessToken}}</span></p>
                <p class="hidden">reference::<span class="reference">{{message.reference}}</span></p>
                <p class="hidden">replyTo::<span class="replyTo">{{message.replyTo}}</span></p>
                <p class="hidden"> Message_Id::<span class=" message_Id">{{message.Message_Id}}</span></p>
                <p class="hidden"> returnReply::<span class=" returnReply">{{message.returnReply}}</span></p>
            </div>


        </div>
        <ol>
            {{#each this.res}}

            <div class="shadow p-3 mb-3 bg-body-tertiary rounded">
                <h6>From- <span class="from"> {{this.from}}</span></h6>
                <h6>To- <span class="to"> {{this.to}}</sp></span>
                    <div class="shadow-none p-3 bg-body-tertiary rounded">
                        <pre
                            class=" bg-body-secondary  p-3 rounded mail-item overflow-hidden w-100">{{this.message}}</pre>
                    </div>
                    <br>
            </div>

            {{/each}}

        </ol>
        <div class="response-style">
            {{!-- prompt --}}
            <div class="d-flex">
                <textarea class="p-2 w-100 ms-4" id="promptInput" cols="30"
                    rows="1"> Write response for this mail</textarea>
                <button type="button" class="btn btn-primary p-2 flex-shrink-1"
                    onclick="handleResponse()">Response</button>
            </div>
            {{!-- response --}}
            <div id="new" class="response"></div>
        </div>
    </div>

    {{!-- bootstrap js --}}
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
        crossorigin="anonymous"></script>

    {{!-- js script --}}
    <script>



        let sendButton = false;

        // geting all response to generate response
        function handleResponse() {
            var messages = document.querySelectorAll('.mail-item');
            const conversation = messages[messages.length - 1].textContent
            var concatenatedMessage = Array.from(messages).map(function (message) {
                return message.textContent.trim();
            }).join();
            handleGenerateResponse(concatenatedMessage)

        }



        // generate function 
        async function handleGenerateResponse(conversation) {
            console.log("conversation::", conversation)
            try {
                const prompt = document.getElementById('promptInput').value;
                if (!prompt) {
                    alert('Please enter a prompt.');
                    return;
                }
                const data = {
                    prompt: prompt,
                    concatenatedMessage: conversation,
                }
                //fetch response 
                fetch('/google/generate-response', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data),
                })
                    .then(async function (res) {
                        const response = await res.json();

                        var element = document.getElementById("new");
                        // check if previous response 
                        element.innerHTML = '';
                        // create tag to add response
                        var tag = document.createElement("textarea");
                        tag.cols = 188
                        tag.rows = 10

                        var textNode = document.createTextNode(response.messageResponse);
                        tag.appendChild(textNode);

                        var element = document.getElementById("new");
                        element.appendChild(tag);

                        //create send button 
                        if (sendButton === false) {
                            sendButton = createButton("Reply");
                            sendButton = true
                        }
                    })
                    .catch(function (error) {
                        console.log('error', error)
                    })
            } catch (error) {
                console.error('Error:', error);
            }
        }
        function getTextContentBySelector(selector) {
            const element = document.querySelector(selector);
            return element ? element.textContent : '';
        }

        function createButton(btn) {
            let button = document.createElement('button')
            button.textContent = btn;
            document.body.appendChild(button);
            button.addEventListener('click', function () { handleSendResponse() })
        }
        //fetch chatgpt response
        function getChatResponse() {
            const address = document.querySelector("#new textarea");
            const text = address.value;
            console.log("chatgptResponse::::", text);
            return text;
        }

        function emailContents() {
            //get GPT REsponse
            const chatgptResponse = getChatResponse();

            //get To address
            const to = getTextContentBySelector(".to");

            //get from 
            const from = getTextContentBySelector(".from");

            //get subject
            const subject = getTextContentBySelector(".subject")

            //get accessToken
            const accessToken = getTextContentBySelector(".accessToken")

            //get threadId
            const threadId = getTextContentBySelector(".threadId")

            //get current email
            const currentEmailId = getTextContentBySelector(".currentEmailId")

            const reference = getTextContentBySelector(".reference")

            //get reply to 
            const replyTo = getTextContentBySelector('.replyTo')

            //get message id
            const Message_Id = getTextContentBySelector('.message_Id')

            const returnReply = getTextContentBySelector('.returnReply')

            const emailContent = {
                chatgptResponse: chatgptResponse,
                to: trimStr(to),
                from: trimStr(from),
                subject: subject,
                reference: reference,
                replyTo: replyTo,
                Message_Id: Message_Id,
                currentEmailId: currentEmailId,
                accessToken: accessToken,
                threadId: threadId
            }
            console.log("EmailContent::", emailContent)
            return emailContent
        }


        //Send function
        function handleSendResponse() {
            console.log("button clicked")
            const emailContent = emailContents()
            console.log("EmailContent", emailContent)
            fetch(`/google/send-email`, {
                method: "Post",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(emailContent)
            })
                .then(function (response) {
                    console.log(response.json)
                    alert("Sent successfully!")
                })
        }

        function trimStr(str) {
            const emailRegex = /<([^>]+)>/; // Regular expression to match email address within <>

            const match = str.match(emailRegex);
            if (match && match[1]) {
                const emailAddress = match[1];
                console.log("after trim::", emailAddress)
                return emailAddress;
            } else {
                console.log("Email address not found in the string.");
                return str;
            }

        }

    </script>
</body>

</html>